import React, { useEffect, useState, useRef } from "react";
import styles from "./NPCitySelection.module.scss";
import { bodyWarehouses } from "./apiData";
import {
  getWarehousesDataAction,
  setSelectedWarehouse,
} from "./redux/actions/actionCreator";
import { connect } from "react-redux";

const NPWarehouseSelection = (props) => {
  const { getWarehousesDataAction, setSelectedWarehouse } = props;
  const { warehousesData, selectedWarehouse, selectedCity, selectedCityRef } = props;
  const {warehouseOpen, setWarehousesOpen} = props;

  const [warehousesInputValue, setWarehousesInputValue] = useState(""); //—Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const [warehouseCurrentPage, setWarehouseCurrentPage] = useState(1);
  const [warehouseFetching, setWarehouseFetching] = useState(true);

  const methodProperties = {
    Page: warehouseCurrentPage,
    Limit: 30,
    CityRef: selectedCityRef,
  };
  const newBody = { ...bodyWarehouses, methodProperties };

  // —Å–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏–π –ø—Ä–∏ —Å–º–µ–Ω–µ –≥–æ—Ä–æ–¥–∞
  useEffect(() => {
    if (selectedCityRef.length) {
      getWarehousesDataAction({ data: newBody, newCity: true });
    }
  }, [selectedCityRef]);

  // –ø–∞–≥–∏–Ω–∞—Ü–∏—è + –∑–∞–ø—Ä–µ—Ç –Ω–∞ –ø—Ä–æ–≥—Ä—É–∑–∫—É –æ—Ç–¥–µ–ª–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    if (warehouseFetching && selectedCityRef.length) {
      getWarehousesDataAction({ data: newBody }); // –ø–∞–≥–∏–Ω–∞—Ü–∏—è
      setWarehouseFetching(false);
    }
  }, [warehouseFetching, selectedCityRef]);

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–µ–Ω–∏—è –≤ –∏–Ω–ø—É—Ç
  const handleWarehouseChange = (warehouse) => {
    warehouse !== "" ? setWarehousesOpen(false) : void 0;
  };

  /////////////////–õ–æ–≥–∏–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏///////////////////////////
  const scrollContainerRef = useRef(null);
  const [scrollHeight, setScrollHeight] = useState(0); // –ø–æ–ª–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  const [scrollFromTop, setScrollFromTop] = useState(0); // –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–∫—Ä–æ–ª–∞ –æ—Ç –≤–µ—Ä—Ö–∞
  const [clientHeight, setClientHeight] = useState(0); // –≤–∏–¥–∏–º–∞—è –≤—ã—Å–æ—Ç–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞

  const handleScroll = () => {
    const scrollContainer = scrollContainerRef.current;
    if (scrollContainer) {
      const fullHeight = scrollContainer.scrollHeight;
      const heightFromTop = scrollContainer.scrollTop;
      const visibleHeight = scrollContainer.clientHeight;

      setScrollHeight(fullHeight);
      setScrollFromTop(heightFromTop);
      setClientHeight(visibleHeight);
    }
  };

  useEffect(() => {
    const scrollEndReached = scrollHeight - (scrollFromTop + clientHeight);
    if (scrollEndReached < 1 && scrollEndReached !== 0) {
      console.log("scroll");
      setWarehouseFetching(true);
      setWarehouseCurrentPage((prev) => ++prev);
    }
  }, [scrollHeight, scrollFromTop, clientHeight]);

  useEffect(() => {
    const scrollContainer = scrollContainerRef.current;
    if (scrollContainer) {
      scrollContainer.addEventListener("scroll", handleScroll);
    }

    return () => {
      if (scrollContainer) {
        scrollContainer.removeEventListener("scroll", handleScroll);
      }
    };
  }, []);

  return (
      <div className={styles.componentWrap}>
        <div
          className={styles.field}
          disabled={!selectedCity}
          onClick={() =>
            warehousesData.length > 0
              ? setWarehousesOpen(!warehouseOpen)
              : void 0
          }
        >
          {warehousesData.length > 0
            ? selectedWarehouse
              ? selectedWarehouse.length > 40
                ? `${selectedWarehouse.slice(0, 40)}...`
                : selectedWarehouse
              : "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ"
            : "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏–π"}
          <span>‚ñº</span>
        </div>
        <div
          className={styles.ul}
          ref={scrollContainerRef}
          style={{ display: warehouseOpen ? "block" : "none" }}
        >
          <div className={styles.placeholder}>
            <span>üîé</span>
            <input
              type="text"
              value={warehousesInputValue}
              onClick={() => setSelectedWarehouse("")}
              onChange={(e) =>
                setWarehousesInputValue(e.target.value.toLowerCase())
              }
              placeholder={
                warehousesData?.length > 0
                  ? "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è"
                  : "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏–π"
              }
              className={styles.input}
            />
          </div>
          <div className={styles.list}>
            {warehousesData.map((warehouse) => (
              <option
                key={warehouse.SiteKey}
                value={warehouse.Description}
                className={`
                      ${styles.li} 
                      ${
                        warehouse.Description.toLowerCase() ===
                        selectedWarehouse.toLowerCase()
                          ? styles.selectedElement
                          : ""
                      }`}
                style={{
                  display: new RegExp(warehousesInputValue, "i").test(
                    warehouse.Description
                  )
                    ? "block"
                    : "none",
                }}
                onClick={() => {
                  if (
                    warehouse.Description.toLowerCase() !==
                    selectedWarehouse.toLowerCase()
                  ) {
                    setSelectedWarehouse(warehouse.Description);
                  }
                  handleWarehouseChange(warehouse);
                }}
              >
                {warehouse.Description}
              </option>
            ))}
          </div>
        </div>
      </div>
  );
};

const mapDispatchToProps = (dispatch) => ({
  setSelectedWarehouse: (data) => dispatch(setSelectedWarehouse(data)),
  getWarehousesDataAction: (data) => dispatch(getWarehousesDataAction(data)),
});

const mapStateToProps = (state) => {
  return {
    selectedCity: state.novaPostReducers.selectedCity,
    selectedCityRef: state.novaPostReducers.selectedCityRef,
    warehousesData: state.novaPostReducers.warehousesData,
    selectedWarehouse: state.novaPostReducers.selectedWarehouse,
  };
};
export default connect(
  mapStateToProps,
  mapDispatchToProps
)(NPWarehouseSelection);
